import HTTP from '../http/HTTP';
import { ClientConfig, ClientOptions } from '../../resources/structs';
import { AESKeysRequestParams, AESKeysResponseData, BannerColorsRequestParams, BannerColorsResponseData, BannersRequestParams, BannersResponseData, BRMapRequestParams, BRMapResponseData, BRNewsRequestParams, BRNewsResponseData, BRShopCombinedRequestParams, BRShopCombinedResponseData, BRShopRequestParams, BRShopResponseData, BRStatsByAccountIDRequestParams, BRStatsByAccountIDResponseData, BRStatsRequestParams, BRStatsResponseData, CosmeticsByIDRequestParams, CosmeticsByIDResponseData, CosmeticsListRequestParams, CosmeticsListResponseData, CosmeticsSearchAllRequestParams, CosmeticsSearchAllResponseData, CosmeticsSearchByIDsRequestParams, CosmeticsSearchByIDsResponseData, CosmeticsSearchRequestParams, CosmeticsSearchResponseData, CreativeNewsRequestParams, CreativeNewsResponseData, CreatorCodeRequestParams, CreatorCodeResponseData, NewCosmeticsRequestParams, NewCosmeticsResponseData, NewsRequestParams, NewsResponseData, PlaylistByIDRequestParams, PlaylistByIDResponseData, PlaylistsRequestParams, PlaylistsResponseData, STWNewsRequestParams, STWNewsResponseData } from '../http/autogeneratedEndpointStructs';
declare class Client {
    http: HTTP;
    config: ClientConfig;
    constructor(config?: ClientOptions);
    /**
     * Returns the current aes keys
     * @param options Options for this endpoint
     */
    aesKeys(options?: AESKeysRequestParams): Promise<AESKeysResponseData>;
    /**
     * Returns an array of all banners
     * @param options Options for this endpoint
     */
    banners(options?: BannersRequestParams): Promise<BannersResponseData>;
    /**
     * Returns an array of all banner colors
     * @param options Options for this endpoint
     */
    bannerColors(options?: BannerColorsRequestParams): Promise<BannerColorsResponseData>;
    /**
     * Returns an array of all battle royale cosmetics
     * @param options Options for this endpoint
     */
    cosmeticsList(options?: CosmeticsListRequestParams): Promise<CosmeticsListResponseData>;
    /**
     * Returns data of the latest added battle royale cosmetics
     * @param options Options for this endpoint
     */
    newCosmetics(options?: NewCosmeticsRequestParams): Promise<NewCosmeticsResponseData>;
    /**
     * Returns data of the requested battle royale cosmetic ID
     * @param options Options for this endpoint
     */
    cosmeticsByID(options: {
        id: string;
    } & CosmeticsByIDRequestParams): Promise<CosmeticsByIDResponseData>;
    /**
     * Returns data of the first battle royale cosmetic which matches the search options(s)
     * @param options Options for this endpoint
     */
    cosmeticsSearch(options?: CosmeticsSearchRequestParams): Promise<CosmeticsSearchResponseData>;
    /**
     * Returns an array of all battle royale cosmetics which match the search options(s)
     * @param options Options for this endpoint
     */
    cosmeticsSearchAll(options?: CosmeticsSearchAllRequestParams): Promise<CosmeticsSearchAllResponseData>;
    /**
     * Returns an array of the requested battle royale cosmetic IDs
     * @param options Options for this endpoint
     */
    cosmeticsSearchByIDs(options: Omit<CosmeticsSearchByIDsRequestParams, 'id'> & {
        id: string | string[];
    }): Promise<CosmeticsSearchByIDsResponseData>;
    /**
     * Returns data of a creator code by its name
     * @param options Options for this endpoint
     */
    creatorCode(options: CreatorCodeRequestParams): Promise<CreatorCodeResponseData>;
    /**
     * Returns data & images of the BR map & POIs
     * @param options Options for this endpoint
     */
    brMap(options?: BRMapRequestParams): Promise<BRMapResponseData>;
    /**
     * Returns data of the current battle royale, save the world & creative news
     * @param options Options for this endpoint
     */
    news(options?: NewsRequestParams): Promise<NewsResponseData>;
    /**
     * Returns data of the current battle royale news
     * @param options Options for this endpoint
     */
    brNews(options?: BRNewsRequestParams): Promise<BRNewsResponseData>;
    /**
     * Returns data of the current save the world news
     * @param options Options for this endpoint
     */
    stwNews(options?: STWNewsRequestParams): Promise<STWNewsResponseData>;
    /**
     * Returns data of the current creative news
     * @param options Options for this endpoint
     */
    creativeNews(options?: CreativeNewsRequestParams): Promise<CreativeNewsResponseData>;
    /**
     * Returns an array of all playlists
     * @param options Options for this endpoint
     */
    playlists(options?: PlaylistsRequestParams): Promise<PlaylistsResponseData>;
    /**
     * Returns data of the requested playlist ID
     * @param options Options for this endpoint
     */
    playlistById(options: {
        id: string;
    } & PlaylistByIDRequestParams): Promise<PlaylistByIDResponseData>;
    /**
     * Returns data of the current battle royale shop
     * @param options Options for this endpoint
     */
    brShop(options?: BRShopRequestParams): Promise<BRShopResponseData>;
    /**
     * Returns data of the current battle royale shop (combines the special and default categories into one)
     * @param options Options for this endpoint
     */
    brShopCombined(options?: BRShopCombinedRequestParams): Promise<BRShopCombinedResponseData>;
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    brStats(options: BRStatsRequestParams): Promise<BRStatsResponseData>;
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    brStatsByID(options: {
        id: string;
    } & BRStatsByAccountIDRequestParams): Promise<BRStatsByAccountIDResponseData>;
}
export default Client;
