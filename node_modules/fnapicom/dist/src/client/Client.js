"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const HTTP_1 = tslib_1.__importDefault(require("../http/HTTP"));
const enums_1 = require("../../resources/enums");
class Client {
    constructor(config) {
        this.config = {
            language: enums_1.Language.English,
            rateLimitExtraTimeout: 0,
            ...config,
        };
        this.http = new HTTP_1.default(this);
    }
    /**
     * Returns the current aes keys
     * @param options Options for this endpoint
     */
    async aesKeys(options) {
        return this.http.fetch('/v2/aes', options);
    }
    /**
     * Returns an array of all banners
     * @param options Options for this endpoint
     */
    async banners(options) {
        return this.http.fetch('/v1/banners', options);
    }
    /**
     * Returns an array of all banner colors
     * @param options Options for this endpoint
     */
    async bannerColors(options) {
        return this.http.fetch('/v1/banners/colors', options);
    }
    /**
     * Returns an array of all battle royale cosmetics
     * @param options Options for this endpoint
     */
    async cosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/br', options);
    }
    /**
     * Returns data of the latest added battle royale cosmetics
     * @param options Options for this endpoint
     */
    async newCosmetics(options) {
        return this.http.fetch('/v2/cosmetics/br/new', options);
    }
    /**
     * Returns data of the requested battle royale cosmetic ID
     * @param options Options for this endpoint
     */
    async cosmeticsByID(options) {
        return this.http.fetch(`/v2/cosmetics/br/${options.id}`);
    }
    /**
     * Returns data of the first battle royale cosmetic which matches the search options(s)
     * @param options Options for this endpoint
     */
    async cosmeticsSearch(options) {
        return this.http.fetch('/v2/cosmetics/br/search', options);
    }
    /**
     * Returns an array of all battle royale cosmetics which match the search options(s)
     * @param options Options for this endpoint
     */
    async cosmeticsSearchAll(options) {
        return this.http.fetch('/v2/cosmetics/br/search/all', options);
    }
    /**
     * Returns an array of the requested battle royale cosmetic IDs
     * @param options Options for this endpoint
     */
    async cosmeticsSearchByIDs(options) {
        return this.http.fetch('/v2/cosmetics/br/search/ids', options);
    }
    /**
     * Returns data of a creator code by its name
     * @param options Options for this endpoint
     */
    async creatorCode(options) {
        return this.http.fetch('/v2/creatorcode', options);
    }
    /**
     * Returns data & images of the BR map & POIs
     * @param options Options for this endpoint
     */
    async brMap(options) {
        return this.http.fetch('/v1/map', options);
    }
    /**
     * Returns data of the current battle royale, save the world & creative news
     * @param options Options for this endpoint
     */
    async news(options) {
        return this.http.fetch('/v2/news', options);
    }
    /**
     * Returns data of the current battle royale news
     * @param options Options for this endpoint
     */
    async brNews(options) {
        return this.http.fetch('/v2/news/br', options);
    }
    /**
     * Returns data of the current save the world news
     * @param options Options for this endpoint
     */
    async stwNews(options) {
        return this.http.fetch('/v2/news/stw', options);
    }
    /**
     * Returns data of the current creative news
     * @param options Options for this endpoint
     */
    async creativeNews(options) {
        return this.http.fetch('/v2/news/creative', options);
    }
    /**
     * Returns an array of all playlists
     * @param options Options for this endpoint
     */
    async playlists(options) {
        return this.http.fetch('/v1/playlists', options);
    }
    /**
     * Returns data of the requested playlist ID
     * @param options Options for this endpoint
     */
    async playlistById(options) {
        return this.http.fetch(`/v1/playlists/${options.id}`, options);
    }
    /**
     * Returns data of the current battle royale shop
     * @param options Options for this endpoint
     */
    async brShop(options) {
        return this.http.fetch('/v2/shop/br', options);
    }
    /**
     * Returns data of the current battle royale shop (combines the special and default categories into one)
     * @param options Options for this endpoint
     */
    async brShopCombined(options) {
        return this.http.fetch('/v2/shop/br/combined', options);
    }
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    async brStats(options) {
        return this.http.fetchStats('/v2/stats/br/v2', options);
    }
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    async brStatsByID(options) {
        return this.http.fetchStats(`/v2/stats/br/v2/${options.id}`, options);
    }
}
exports.default = Client;
//# sourceMappingURL=Client.js.map