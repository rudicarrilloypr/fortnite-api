"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable no-restricted-syntax */
const axios_1 = tslib_1.__importStar(require("axios"));
const axios_rate_limit_1 = tslib_1.__importDefault(require("axios-rate-limit"));
const package_json_1 = require("../../package.json");
const FortniteAPIError_1 = tslib_1.__importDefault(require("../exceptions/FortniteAPIError"));
const InvalidAPIKeyError_1 = tslib_1.__importDefault(require("../exceptions/InvalidAPIKeyError"));
const MissingAPIKeyError_1 = tslib_1.__importDefault(require("../exceptions/MissingAPIKeyError"));
const util_1 = require("../util/util");
class HTTP {
    constructor(client) {
        this.client = client;
        this.axios = axios_1.default.create({
            method: 'GET',
            baseURL: 'https://fortnite-api.com',
            headers: {
                ...process.env.IS_BROWSER !== 'true' ? {
                    'User-Agent': `fnapicom/${package_json_1.version}`,
                } : {},
                ...typeof this.client.config.apiKey === 'string' ? {
                    Authorization: this.client.config.apiKey,
                } : {},
            },
        });
        this.statsAxios = (0, axios_rate_limit_1.default)(this.axios, {
            maxRequests: 3,
            perMilliseconds: 1100 + this.client.config.rateLimitExtraTimeout,
        });
    }
    async fetch(url, params) {
        var _a, _b;
        try {
            const response = await this.axios({
                url,
                params,
                paramsSerializer: util_1.serializeParams,
            });
            return response.data;
        }
        catch (e) {
            if (e instanceof axios_1.AxiosError && ((_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error)) {
                if (e.response.status === 401) {
                    if (this.client.config.apiKey) {
                        throw new InvalidAPIKeyError_1.default(url);
                    }
                    else {
                        throw new MissingAPIKeyError_1.default(url);
                    }
                }
                throw new FortniteAPIError_1.default(e.response.data, e.config, e.response.status);
            }
            throw e;
        }
    }
    async fetchStats(url, params) {
        var _a, _b;
        try {
            const response = await this.statsAxios({
                url,
                params,
                paramsSerializer: util_1.serializeParams,
            });
            return response.data;
        }
        catch (e) {
            if (e instanceof axios_1.AxiosError && ((_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error)) {
                if (e.response.status === 401) {
                    if (this.client.config.apiKey) {
                        throw new InvalidAPIKeyError_1.default(url);
                    }
                    else {
                        throw new MissingAPIKeyError_1.default(url);
                    }
                }
                throw new FortniteAPIError_1.default(e.response.data, e.config, e.response.status);
            }
            throw e;
        }
    }
}
exports.default = HTTP;
//# sourceMappingURL=HTTP.js.map